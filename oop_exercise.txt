class Circle():
    def __init__(self,radius):
        self.pi = 3.1416
        self.radius = radius
    
    def calArea(self):
        return self.pi*self.radius**2
    
c=Circle(3)
c.calArea()


class Rectangle():
    def __init__(self,l,w):
        self.l = l
        self.w = w
    def calArea(self):
        return self.l*self.w
    
r=Rectangle(3,5)
r.calArea()   

class Person():
    def __init__(self,name):
        self.name = name
    def legally_change_name(self,newname):
        self.name = newname
    def introduce_myself(self):
        print('My name is : {}'.format(self.name))
        
p1=Person('Jaya')
p2=Person('Krishna')
p1.introduce_myself()
p2.introduce_myself()
p1.legally_change_name('Jai')
p1.introduce_myself()
p2.introduce_myself()        

class Animal():
    def __init__(self,typ,name,location):
        self.typ = typ
        self.name = name
        self.location = location
    def yell(self):
        print("I belong to {} family, my name is {}, i live on/in {}".format(self.typ,self.name,self.location))
    def set_location(self,changed_location):
        self.location = changed_location
        self.yell()


# Nouns: bag, dice, game
# Verbs: roll, draw, sum

import random

class Die:
    def __init__(self, num_sides):
        if num_sides > 20:
            raise ValueError("You can't have more than a 20 sided die!")
        if num_sides % 2 != 0:
            raise ValueError("You can't have an odd-sided die")
        self._num_sides = num_sides 

    def roll(self):
        return random.randint(1, self._num_sides)

class Bag:
    
    def __init__(self,ndies):
        self.ndies = ndies
        self.ls=[]
        self.finalselectlist=[]
     
    def builddies(self):
        for sides,noofdies in self.ndies.items():
            for die in range(1,noofdies+1):
                dieformed=[]
                for i in range(1,sides+1):
                    dieformed.append(i)
                self.ls.append(dieformed)
        return self.ls
    
    def removedies(self,noofdiestoremove):
        for i in range(noofdiestoremove):
            self.ls.remove(random.choice(self.ls))
        return self.ls
    
    def selectdies(self,noofdiestoselect):
        for i in range(1,noofdiestoselect+1):
            selchoice=[]
            selchoice = random.choice(self.ls)
            self.finalselectlist.append(selchoice)
            ls.remove(selchoice)
        return noofdiestoselect,self.finalselectlist
    
    def sumofrolleddies(self,noofdiesselected):
        total=0
        for i in range(0,noofdiesselected):
            x=random.choice(self.finalselectlist[i])
            print('roll number: {}'.format(x))
            total = total + x
        return(total)
    

if __name__ == '__main__':
    b = Bag({4:1, 6:2, 8:4, 10:2, 12:1, 20:3})
    ls=b.builddies()
    print(ls)
    lsafterremoved = b.removedies(3)
    print(lsafterremoved)
    noofdiesselected,sellist=b.selectdies(2)
    print(sellist)
    print('total is {}'.format(b.sumofrolleddies(noofdiesselected)))
 


#It has: 1d4, 2d6, 4d8, 2d10, 1d12, 3d20. 